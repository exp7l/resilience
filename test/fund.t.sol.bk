// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.13;

import "forge-std/Test.sol";
import "../src/interfaces/imarketmanager.sol";
import "../src/interfaces/ivault.sol";
import "../src/rdb.sol";
import "../src/fund.sol";
import "../src/vault.sol";
import "../src/token.sol";

contract MockMarketManager {
    // TODO: why does x fail when getting?
    function setLiquidity(uint _x, uint _y, uint _z)
        external
        returns (uint256)
    {
        return 0;
    }
}

contract FundTest is Test
{
    RDB      rdb;
    DSToken  rusd;
    DSToken  weth;
    Fund     fund;
    Vault    vault;
    MockMarketManager marketmanager;
    uint     fundId;

    function setUp ()
        public
    {
        rdb  = new RDB();

        rusd           = new DSToken("RUSD");
        rdb.setRUSD(address(rusd));

        weth           = new DSToken("WETH");        
        rdb.setWETH(address(weth));

        fund = new Fund(address(rdb));
        fundId = 1;
        fund.createFund(fundId);
        rdb.setFund(address(fund));

        vault = new Vault(address(rdb));
        rdb.setVault(address(vault));

        MockMarketManager marketmanager = new MockMarketManager();
        rdb.setMarketManager(address(marketmanager));
    }

    function testSetFundPosition()
        public
    {
        uint[] memory _marketIds = new uint[](3);
        uint[] memory _weights   = new uint[](3);
        _marketIds[0] = 1;
        _marketIds[1] = 2;
        _marketIds[2] = 3;                
        _weights[0]   = 1;
        _weights[1]   = 2;
        _weights[2]   = 3;                
        fund.setFundPosition(fundId,
                             _marketIds,
                             _weights);
        // test for no revert
    }
}
